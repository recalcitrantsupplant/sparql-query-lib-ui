// --- Types ---
interface IdReference {
  '@id': string;
}

interface QueryParameter {
    '@type': 'QueryParameter';
    paramName: string;
    allowedTypes?: string[];
}

interface QueryParameterGroup {
    '@type': 'QueryParameterGroup';
    vars: QueryParameter[];
}

interface Query {
  '@id': string;
  '@type': 'StoredQuery';
  name: string;
  description: string;
  query: string;
  queryType: string;
  outputVars: string[];
  parameters: QueryParameterGroup[] | null;
  'http://schema.org/isPartOf': IdReference[];
  'http://schema.org/dateCreated': string;
  'http://schema.org/dateModified': string;
}

interface SparqlBindingValue {
  type: 'uri' | 'literal' | 'typed-literal' | 'bnode';
  value: string;
  datatype?: string;
  'xml:lang'?: string;
}

type SparqlBinding = Record<string, SparqlBindingValue | undefined>;

interface SparqlResults {
  head: {
    vars: string[];
    link?: string[];
  };
  results: {
    bindings: SparqlBinding[];
  };
  boolean?: boolean;
}

// Interface for the response from the detect-parameters endpoint
interface DetectedParametersResponse {
  valuesParameters?: string[][];
  limitParameters?: string[];
  offsetParameters?: string[];
}

// --- Argument Input Types ---
interface ArgumentValue {
  value: string;
  type: 'uri' | 'literal';
}

interface QueryArgumentsModel {
  values: Record<string, ArgumentValue[]>; // Param name -> Array of values (index implies grouping)
  limit: Record<string, string>; // Param name -> value string
  offset: Record<string, string>; // Param name -> value string
}


export type {
  IdReference,
  QueryParameter,
  QueryParameterGroup,
  Query,
  SparqlBindingValue,
  SparqlBinding,
  SparqlResults,
  ResourceItem, // Add ResourceItem here
  // Query Group Related Types
  NodeParameterMapping,
  QueryNode,
  ParameterMapping,
  QueryEdge,
  QueryGroup,
  QueryGroupSaveData, // Add QueryGroupSaveData here
  DetectedParametersResponse, // Export the new type
  ArgumentValue, // Export ArgumentValue
  QueryArgumentsModel, // Export QueryArgumentsModel
};

// Interface for saving/updating a group, based on createQueryGroupBody (def-25) and queryGroup (def-24)
interface QueryGroupSaveData {
  name: string;
  description?: string;
  nodes?: QueryNode[];
  edges?: QueryEdge[];
  startNodeIds?: string[];
  endNodeIds?: string[];
  canvasLayout?: string; // Added canvasLayout
  // '@id' is added for PUT requests
  '@id'?: string;
}


// --- Query Group Types (Based on OpenAPI defs 20-24) ---

interface NodeParameterMapping {
  '@id'?: string; // Optional for creation? Spec says required in def-20, but might be server-generated
  '@type': 'NodeParameterMapping';
  parameterName: string;
  parameterValue: string; // This seems simplified, might need adjustment based on actual usage (e.g., static value vs. mapping)
}

interface QueryNode {
  '@id': string; // URI, likely generated by client for linking edges before save? Or server? Let's assume client needs to provide temporary ones.
  '@type': 'QueryNode';
  queryId: string; // URI of the StoredQuery
  backendId?: string; // URI of the Backend (Optional? Spec says required in def-21, but maybe defaults?) - Let's make optional for flexibility
  parameterMappings?: NodeParameterMapping[];
  // Add position/layout info if needed for Vue Flow
  position?: { x: number; y: number };
  label?: string; // For display in Vue Flow
  isSelected?: boolean; // UI state for selection
}

interface ParameterMapping {
  '@id'?: string; // Optional for creation?
  '@type': 'ParameterMapping';
  fromParam: string; // Output variable name from the source node's query
  toParam: string;   // Input parameter name for the target node's query
}

interface QueryEdge {
  '@id': string; // URI, likely generated by client?
  '@type': 'QueryEdge';
  fromNodeId: string; // @id of the source QueryNode
  toNodeId: string;   // @id of the target QueryNode
  mappings: ParameterMapping[];
  // Add styling/label info if needed for Vue Flow
  label?: string;
  isSelected?: boolean; // UI state for selection
}

interface QueryGroup {
  '@id': string; // URI
  '@type': 'QueryGroup';
  name: string;
  description?: string;
  nodes?: QueryNode[];
  edges?: QueryEdge[];
  startNodeIds?: string[]; // URIs of starting nodes
  endNodeIds?: string[];   // URIs of ending nodes (Optional? Spec doesn't explicitly say)
  'http://schema.org/isPartOf'?: IdReference[]; // Added based on feedback, likely derived from nodes
  'http://schema.org/dateCreated'?: string; // ReadOnly - Reverted to optional as client doesn't send
  'http://schema.org/dateModified'?: string; // ReadOnly - Reverted to optional as client doesn't send
  // Add libraryId if groups are scoped to libraries (API spec doesn't show this link directly on QueryGroup, but implies via StoredQuery links)
  libraryId?: string; // Added for convenience, assuming groups belong to a library contextually
  canvasLayout?: string; // JSON string storing node positions and potentially other layout info
}

// Define a union type for items displayed in ResourceList
type ResourceItem = Query | QueryGroup;
